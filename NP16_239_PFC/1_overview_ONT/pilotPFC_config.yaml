# Output name and relevant info
export NAME=pilotPFC

# if multiplexing was performed
export MULTIPLEXING=FALSE

# if perform demultiplexing
export DEMULTIPLEX=FALSE
export DEMULTIPLEX_DIR=NA
export MERGE_FASTQ=FALSE
export DEMULTIPLEX_SOFTWARE=NA

# sequencing mode: <targeted> <whole>
export SEQUENCING=whole

## Output root directory filepath (ensure path exists)
export SCRIPT_ROOT=/lustre/projects/Research_Project-MRC148213/lsl693/scripts/LRPipeline/ont_cDNA
export WKD_ROOT=/lustre/projects/Research_Project-MRC190311/longReadSeq/ONTRNA/Gina/analysis
export META_ROOT=/lustre/projects/Research_Project-MRC190311/longReadSeq/ONTRNA/Gina/analysis/0_metadata


## SKLeung scripts
export LOGEN_ROOT=/lustre/projects/Research_Project-MRC148213/lsl693/scripts/LOGen
export PATH=$PATH:${LOGEN_ROOT}/miscellaneous
export PATH=$PATH:${LOGEN_ROOT}/assist_ont_processing
SUBSETPOLYTAILS=$LOGEN_ROOT/assist_ont_processing/subset_polyA_polyT.py


## ---------------------------

## Reference data filepaths 
export GENOME_FASTA=/lustre/projects/Research_Project-MRC148213/lsl693/references/human/hg38.fa
export GENOME_GTF=/lustre/projects/Research_Project-MRC148213/lsl693/references/annotation/gencode.v40.annotation.gtf

## ---------------------------

# number of total samples (across all flow cells)
export numSamples=1

## ONT raw data
# sequentially specify paths of raw fastq files from multiple flow cells
export RAW_ROOT_DIR=/lustre/projects/Research_Project-MRC190311/longReadSeq/ONTRNA/Gina/basecalled_sequence

# export barcode (if multiplexing=TRUE) <barcode number> <sample name>
BARCODE_CONFIG=${META_ROOT}/testingPFCBarcodeID.csv
export ALL_SAMPLES_NAMES=($(awk -F "\"*,\"*" '{print $1}' ${BARCODE_CONFIG}))
cat $BARCODE_CONFIG

# sample names to replace barcode names downstream 
SAMPLE_ID=${META_ROOT}/testingPFCSampleID.csv

# manifest QC
manifest=${META_ROOT}/manifestQC.csv

# ERCC
ERCC_WKD_ROOT=NULL

## ---------------------------

## Software 
export SOFTDIR=/lustre/projects/Research_Project-MRC148213/lsl693/software

export MINIONQC=${SOFTDIR}/minion_qc/MinIONQC.R
# to run Porechop, require gcc-version 4.9.1 or more; 
# on Knight: git clone https://github.com/rrwick/Porechop.git; cd Porechop; make
# transfer whole Porechop folder from Knight to ISCA, and chmod 
export PORECHOP=${SOFTDIR}/Porechop/porechop-runner.py
export TCLEAN=${SOFTDIR}/TranscriptClean/TranscriptClean.py
export CUPCAKE=${SOFTDIR}/cDNA_Cupcake
export ANNOTATION=$CUPCAKE/annotation
export SEQUENCE=$CUPCAKE/sequence
export PYTHONPATH=$PYTHONPATH:$SEQUENCE
export SQANTI3_DIR=${SOFTDIR}/SQANTI3
export SQANTI_JSON=/lustre/projects/Research_Project-MRC190311/scripts/sequencing/longReadseq/SQANTI3-5.1/SQANTI3-5.1/utilities/filter/filter_adapted.json

## ---------------------------

## Software input files
# SQANTI3 input files
CAGE_PEAK=$SQANTI3_DIR/data/ref_TSS_annotation/human.refTSS_v3.1.hg38.bed
POLYA=$SQANTI3_DIR/data/polyA_motifs/mouse_and_human.polyA_motif.txt


## ---------------------------
# creating a symlink to $WKD_ROOT/1_demultiplex
mkdir -p ${WKD_ROOT}/1_basecalled ${WKD_ROOT}/2_cutadapt_merge ${WKD_ROOT}/3_minimap ${WKD_ROOT}/4_tclean ${WKD_ROOT}/5_cupcake
mkdir -p ${WKD_ROOT}/5_cupcake/5_align  
mkdir -p $WKD_ROOT/5_cupcake/5_align/combined
mkdir -p $WKD_ROOT/5_cupcake/6_collapse $WKD_ROOT/5_cupcake/7_sqanti3
